import os
import logging
import hashlib
from dotenv import load_dotenv
from os.path import join, dirname
from aiogram import Bot, Dispatcher, executor, types
from aiogram.contrib.middlewares.logging import LoggingMiddleware
from aiogram.utils.exceptions import MessageNotModified
from rezka_scraper import RezkaScraper

dotenv_path = join(dirname(__file__), ".env")
load_dotenv(dotenv_path)

API_TOKEN = os.environ.get("API_TOKEN")

if not API_TOKEN:
    raise ValueError("API_TOKEN –Ω–µ –Ω–∞–π–¥–µ–Ω. –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ –æ–Ω —É–∫–∞–∑–∞–Ω –≤ .env —Ñ–∞–π–ª–µ.")

logging.basicConfig(level=logging.INFO)

bot = Bot(token=API_TOKEN)
dp = Dispatcher(bot)
dp.middleware.setup(LoggingMiddleware())
scraper = RezkaScraper()

async def send_anime_list(chat_id, message_id, page):
    bot_info = await bot.get_me()
    bot_username = bot_info.username
    try:
        matches = await scraper.search_anime(page)
        if matches:
            response = "<b>üçø –ù–∞–π–¥–µ–Ω–Ω—ã–µ –∞–Ω–∏–º–µ:</b>\n"
            for title, link in matches:
                response += f"üîπ <a href=\"{link}\">{title}</a>\n"
            response += f"\n<b>ü§ñ: @{bot_username} | üìë: {page}</b>"
            keyboard = types.InlineKeyboardMarkup(row_width=2)
            if page > 1:
                keyboard.insert(types.InlineKeyboardButton("¬´ –ù–∞–∑–∞–¥", callback_data=f"anime_page:{page-1}"))
            keyboard.insert(types.InlineKeyboardButton("–í–ø–µ—Ä—ë–¥ ¬ª", callback_data=f"anime_page:{page+1}"))
            keyboard.insert(types.InlineKeyboardButton("üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="main_menu"))
            keyboard.add(
                types.InlineKeyboardButton("üåÄ Shazam Bot", url="https://t.me/OFFpoliceShazamBot"),
                types.InlineKeyboardButton("üéû HDrezka", url="https://t.me/hdrezka_channel")
            )
            try:
                await bot.edit_message_text(
                    response, chat_id, message_id,
                    parse_mode=types.ParseMode.HTML,
                    reply_markup=keyboard,
                    disable_web_page_preview=True
                )
            except MessageNotModified:
                pass
        else:
            keyboard = types.InlineKeyboardMarkup(row_width=1)
            keyboard.add(types.InlineKeyboardButton("üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="main_menu"))
            try:
                await bot.edit_message_text(
                    "<b>‚ùå –ù–∏—á–µ–≥–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ!</b>",
                    chat_id,
                    message_id,
                    parse_mode=types.ParseMode.HTML,
                    reply_markup=keyboard
                )
            except MessageNotModified:
                pass
    except Exception as e:
        keyboard = types.InlineKeyboardMarkup(row_width=1)
        keyboard.add(types.InlineKeyboardButton("üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="main_menu"))
        error_message = f"<b>‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∑–∞–ø—Ä–æ—Å–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞ –ø–æ–∑–∂–µ.</b>\n\n<b>‚ùå –û—à–∏–±–∫–∞:</b> <code>{e}</code>"
        try:
            await bot.edit_message_text(
                error_message,
                chat_id,
                message_id,
                parse_mode=types.ParseMode.HTML,
                reply_markup=keyboard
            )
        except MessageNotModified:
            pass

async def send_movies_list(chat_id, message_id, page):
    bot_info = await bot.get_me()
    bot_username = bot_info.username
    try:
        matches = await scraper.search_movies(page)
        if matches:
            response = "<b>üçø –ù–∞–π–¥–µ–Ω–Ω—ã–µ —Ñ–∏–ª—å–º—ã:</b>\n"
            for title, link in matches:
                response += f"üîπ <a href=\"{link}\">{title}</a>\n"
            response += f"\n<b>ü§ñ: @{bot_username} | üìë: {page}</b>"
            keyboard = types.InlineKeyboardMarkup(row_width=2)
            if page > 1:
                keyboard.insert(types.InlineKeyboardButton("¬´ –ù–∞–∑–∞–¥", callback_data=f"movie_page:{page-1}"))
            keyboard.insert(types.InlineKeyboardButton("–í–ø–µ—Ä—ë–¥ ¬ª", callback_data=f"movie_page:{page+1}"))
            keyboard.insert(types.InlineKeyboardButton("üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="main_menu"))
            keyboard.add(
                types.InlineKeyboardButton("üåÄ Shazam Bot", url="https://t.me/OFFpoliceShazamBot"),
                types.InlineKeyboardButton("üéû HDrezka", url="https://t.me/hdrezka_channel")
            )
            try:
                await bot.edit_message_text(
                    response, chat_id, message_id,
                    parse_mode=types.ParseMode.HTML,
                    reply_markup=keyboard,
                    disable_web_page_preview=True
                )
            except MessageNotModified:
                pass
        else:
            keyboard = types.InlineKeyboardMarkup(row_width=1)
            keyboard.add(types.InlineKeyboardButton("üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="main_menu"))
            try:
                await bot.edit_message_text(
                    "<b>‚ùå –ù–∏—á–µ–≥–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ!</b>",
                    chat_id,
                    message_id,
                    parse_mode=types.ParseMode.HTML,
                    reply_markup=keyboard
                )
            except MessageNotModified:
                pass
    except Exception as e:
        keyboard = types.InlineKeyboardMarkup(row_width=1)
        keyboard.add(types.InlineKeyboardButton("üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="main_menu"))
        error_message = f"<b>‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∑–∞–ø—Ä–æ—Å–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞ –ø–æ–∑–∂–µ.</b>\n\n<b>‚ùå –û—à–∏–±–∫–∞:</b> <code>{e}</code>"
        try:
            await bot.edit_message_text(
                error_message,
                chat_id,
                message_id,
                parse_mode=types.ParseMode.HTML,
                reply_markup=keyboard
            )
        except MessageNotModified:
            pass

async def send_series_list(chat_id, message_id, page):
    bot_info = await bot.get_me()
    bot_username = bot_info.username
    try:
        matches = await scraper.search_series(page)
        if matches:
            response = "<b>üì∫ –ù–∞–π–¥–µ–Ω–Ω—ã–µ —Å–µ—Ä–∏–∞–ª—ã:</b>\n"
            for title, link in matches:
                response += f"üîπ <a href=\"{link}\">{title}</a>\n"
            response += f"\n<b>ü§ñ: @{bot_username} | üìë: {page}</b>"
            keyboard = types.InlineKeyboardMarkup(row_width=2)
            if page > 1:
                keyboard.insert(types.InlineKeyboardButton("¬´ –ù–∞–∑–∞–¥", callback_data=f"series_page:{page-1}"))
            keyboard.insert(types.InlineKeyboardButton("–í–ø–µ—Ä—ë–¥ ¬ª", callback_data=f"series_page:{page+1}"))
            keyboard.insert(types.InlineKeyboardButton("üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="main_menu"))
            keyboard.add(
                types.InlineKeyboardButton("üåÄ Shazam Bot", url="https://t.me/OFFpoliceShazamBot"),
                types.InlineKeyboardButton("üéû HDrezka", url="https://t.me/hdrezka_channel")
            )
            try:
                await bot.edit_message_text(
                    response, chat_id, message_id,
                    parse_mode=types.ParseMode.HTML,
                    reply_markup=keyboard,
                    disable_web_page_preview=True
                )
            except MessageNotModified:
                pass
        else:
            keyboard = types.InlineKeyboardMarkup(row_width=1)
            keyboard.add(types.InlineKeyboardButton("üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="main_menu"))
            try:
                await bot.edit_message_text(
                    "<b>‚ùå –ù–∏—á–µ–≥–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ!</b>",
                    chat_id,
                    message_id,
                    parse_mode=types.ParseMode.HTML,
                    reply_markup=keyboard
                )
            except MessageNotModified:
                pass
    except Exception as e:
        keyboard = types.InlineKeyboardMarkup(row_width=1)
        keyboard.add(types.InlineKeyboardButton("üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="main_menu"))
        error_message = f"<b>‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∑–∞–ø—Ä–æ—Å–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞ –ø–æ–∑–∂–µ.</b>\n\n<b>‚ùå –û—à–∏–±–∫–∞:</b> <code>{e}</code>"
        try:
            await bot.edit_message_text(
                error_message,
                chat_id,
                message_id,
                parse_mode=types.ParseMode.HTML,
                reply_markup=keyboard
            )
        except MessageNotModified:
            pass

async def send_cartoon_list(chat_id, message_id, page):
    bot_info = await bot.get_me()
    bot_username = bot_info.username
    try:
        matches = await scraper.search_cartoons(page)
        if matches:
            response = "<b>üçø –ù–∞–π–¥–µ–Ω–Ω—ã–µ –º—É–ª—å—Ç—Ñ–∏–ª—å–º—ã:</b>\n"
            for title, link in matches:
                response += f"üîπ <a href=\"{link}\">{title}</a>\n"
            response += f"\n<b>ü§ñ: @{bot_username} | üìë: {page}</b>"
            keyboard = types.InlineKeyboardMarkup(row_width=2)
            if page > 1:
                keyboard.insert(types.InlineKeyboardButton("¬´ –ù–∞–∑–∞–¥", callback_data=f"cartoon_page:{page-1}"))
            keyboard.insert(types.InlineKeyboardButton("–í–ø–µ—Ä—ë–¥ ¬ª", callback_data=f"cartoon_page:{page+1}"))
            keyboard.insert(types.InlineKeyboardButton("üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="main_menu"))
            keyboard.add(
                types.InlineKeyboardButton("üåÄ Shazam Bot", url="https://t.me/OFFpoliceShazamBot"),
                types.InlineKeyboardButton("üéû HDrezka", url="https://t.me/hdrezka_channel")
            )
            try:
                await bot.edit_message_text(
                    response, chat_id, message_id,
                    parse_mode=types.ParseMode.HTML,
                    reply_markup=keyboard,
                    disable_web_page_preview=True
                )
            except MessageNotModified:
                pass
        else:
            keyboard = types.InlineKeyboardMarkup(row_width=1)
            keyboard.add(types.InlineKeyboardButton("üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="main_menu"))
            try:
                await bot.edit_message_text(
                    "<b>‚ùå –ù–∏—á–µ–≥–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ!</b>",
                    chat_id,
                    message_id,
                    parse_mode=types.ParseMode.HTML,
                    reply_markup=keyboard
                )
            except MessageNotModified:
                pass
    except Exception as e:
        keyboard = types.InlineKeyboardMarkup(row_width=1)
        keyboard.add(types.InlineKeyboardButton("üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="main_menu"))
        error_message = f"<b>‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∑–∞–ø—Ä–æ—Å–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞ –ø–æ–∑–∂–µ.</b>\n\n<b>‚ùå –û—à–∏–±–∫–∞:</b> <code>{e}</code>"
        try:
            await bot.edit_message_text(
                error_message,
                chat_id,
                message_id,
                parse_mode=types.ParseMode.HTML,
                reply_markup=keyboard
            )
        except MessageNotModified:
            pass

@dp.message_handler(commands=["start"])
async def cmd_start(message: types.Message):
    welcome_text = (
        "üëã <b>–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å!</b> –Ø —Ç–≤–æ–π –≤–∏—Ä—Ç—É–∞–ª—å–Ω—ã–π –≥–∏–¥ –≤ –º–∏—Ä–µ –∞–Ω–∏–º–µ, —Ñ–∏–ª—å–º–æ–≤, —Å–µ—Ä–∏–∞–ª–æ–≤ –∏ –º—É–ª—å—Ç—Ñ–∏–ª—å–º–æ–≤.\n\n"
        "üîç <b>–•–æ—á–µ—à—å –Ω–∞–π—Ç–∏ —á—Ç–æ-—Ç–æ –∏–Ω—Ç–µ—Ä–µ—Å–Ω–æ–µ –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –Ω–∞ –≤–µ—á–µ—Ä?</b>\n"
        "–ü—Ä–æ—Å—Ç–æ –Ω–∞–ø–∏—à–∏ –º–Ω–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –∞–Ω–∏–º–µ, —Ñ–∏–ª—å–º–∞, —Å–µ—Ä–∏–∞–ª–∞ –∏–ª–∏ –º—É–ª—å—Ç—Ñ–∏–ª—å–º–∞, "
        "–∏ —è –ø–æ–º–æ–≥—É —Ç–µ–±–µ –æ—Ç—ã—Å–∫–∞—Ç—å —ç—Ç–æ –Ω–∞ Rezka.ag.\n\n"
        "üì∫ <b>–ì–æ—Ç–æ–≤ –æ–∫—É–Ω—É—Ç—å—Å—è –≤ –ø—Ä–∏–∫–ª—é—á–µ–Ω–∏—è?</b>\n"
        "–ù–∞–∂–∏–º–∞–π –Ω–∞ –∫–Ω–æ–ø–∫–∏ –Ω–∏–∂–µ –∏–ª–∏ –æ—Ç–ø—Ä–∞–≤—å –º–Ω–µ —Å–æ–æ–±—â–µ–Ω–∏–µ, —á—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å –ø–æ–∏—Å–∫!"
    )
    keyboard = types.InlineKeyboardMarkup(row_width=2)
    keyboard.add(
        types.InlineKeyboardButton("üé¨ –ê–Ω–∏–º–µ", callback_data="search_anime"),
        types.InlineKeyboardButton("üé¨ –§–∏–ª—å–º—ã", callback_data="search_movies"),
        types.InlineKeyboardButton("üé¨ –°–µ—Ä–∏–∞–ª—ã", callback_data="search_series"),
        types.InlineKeyboardButton("üé¨ –ú—É–ª—å—Ç—Ñ–∏–ª—å–º—ã", callback_data="search_cartoons")
    )
    keyboard.add(
        types.InlineKeyboardButton("‚≠êÔ∏è –ü–æ–¥–¥–µ—Ä–∂–∏—Ç–µ –Ω–∞—Å", callback_data="donate")
    )
    await bot.send_message(
        message.chat.id,
        welcome_text,
        parse_mode=types.ParseMode.HTML,
        reply_markup=keyboard,
        protect_content=True
    )

@dp.message_handler(commands=["privacy"])
async def cmd_privacy(message: types.Message):
    bot_info = await bot.get_me()
    bot_username = bot_info.username
    privacy_text = (
        f"<b>–ü–æ–ª–∏—Ç–∏–∫–∞ –∫–æ–Ω—Ñ–∏–¥–µ–Ω—Ü–∏–∞–ª—å–Ω–æ—Å—Ç–∏ @{bot_username}.</b>\n\n"
        f"<b>–î–∞—Ç–∞ –≤—Å—Ç—É–ø–ª–µ–Ω–∏—è –≤ —Å–∏–ª—É: 4 –∏—é–ª—è 2024 –≥.</b>\n\n"
        f"<b>–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ @{bot_username}!</b> –ú—ã —É–¥–µ–ª—è–µ–º –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–Ω–æ–µ –≤–Ω–∏–º–∞–Ω–∏–µ –≤–∞—à–µ–π –∫–æ–Ω—Ñ–∏–¥–µ–Ω—Ü–∏–∞–ª—å–Ω–æ—Å—Ç–∏ –∏ —Å—Ç—Ä–µ–º–∏–º—Å—è –æ–±–µ—Å–ø–µ—á–∏—Ç—å –∑–∞—â–∏—Ç—É –≤–∞—à–∏—Ö –ª–∏—á–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö. –í –¥–∞–Ω–Ω–æ–π –ü–æ–ª–∏—Ç–∏–∫–µ –∫–æ–Ω—Ñ–∏–¥–µ–Ω—Ü–∏–∞–ª—å–Ω–æ—Å—Ç–∏ –æ–ø–∏—Å—ã–≤–∞–µ—Ç—Å—è, –∫–∞–∫ –º—ã —Å–æ–±–∏—Ä–∞–µ–º, –∏—Å–ø–æ–ª—å–∑—É–µ–º –∏ –∑–∞—â–∏—â–∞–µ–º –≤–∞—à—É –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –≤ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–∏ —Å —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—è–º–∏ <b>Telegram</b>, —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è–º–∏ <b>Apple App Store</b> –∏ <b>Google Play Store</b>.\n\n"
        f"<b>1. –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è, –∫–æ—Ç–æ—Ä—É—é –º—ã —Å–æ–±–∏—Ä–∞–µ–º:</b>\n–î–ª—è –æ–±–µ—Å–ø–µ—á–µ–Ω–∏—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–π —Ä–∞–±–æ—Ç—ã –Ω–∞—à–µ–≥–æ –±–æ—Ç–∞ –º—ã –º–æ–∂–µ–º —Å–æ–±–∏—Ä–∞—Ç—å —Å–ª–µ–¥—É—é—â—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –∏–∑ –≤–∞—à–µ–≥–æ –ø—Ä–æ—Ñ–∏–ª—è Telegram:\n- ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (–í–∞—à —É–Ω–∏–∫–∞–ª—å–Ω—ã–π –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä).\n\n"
        f"<b>2. –ö–∞–∫ –º—ã –∏—Å–ø–æ–ª—å–∑—É–µ–º –≤–∞—à—É –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é:</b>\n–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è, –∫–æ—Ç–æ—Ä—É—é –º—ã —Å–æ–±–∏—Ä–∞–µ–º, –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –∏—Å–∫–ª—é—á–∏—Ç–µ–ª—å–Ω–æ —Å —Ü–µ–ª—å—é –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω–∏—è –∏ —É–ª—É—á—à–µ–Ω–∏—è –Ω–∞—à–∏—Ö —É—Å–ª—É–≥.\n\n"
        f"<b>3. –•—Ä–∞–Ω–µ–Ω–∏–µ –∏ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç—å –¥–∞–Ω–Ω—ã—Ö:</b>\n- ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (–í–∞—à —É–Ω–∏–∫–∞–ª—å–Ω—ã–π –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä), –∏ —Å–≤—è–∑–∞–Ω–Ω–∞—è —Å –Ω–∏–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –Ω–µ —Å–æ—Ö—Ä–∞–Ω—è—é—Ç—Å—è –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö.\n\n"
        f"<b>4. –û–±–º–µ–Ω –∏ –ø—Ä–æ–¥–∞–∂–∞ –¥–∞–Ω–Ω—ã—Ö:</b>\n–ú—ã –Ω–µ –ø—Ä–æ–¥–∞–µ–º, –Ω–µ –æ–±–º–µ–Ω–∏–≤–∞–µ–º –∏ –Ω–µ –ø–µ—Ä–µ–¥–∞–µ–º –∏–Ω—ã–º –æ–±—Ä–∞–∑–æ–º –≤–∞—à—É –ª–∏—á–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é —Å—Ç–æ—Ä–æ–Ω–Ω–∏–º –ª–∏—Ü–∞–º. –í–∞—à–∏ –¥–∞–Ω–Ω—ã–µ –∏—Å–ø–æ–ª—å–∑—É—é—Ç—Å—è –∏—Å–∫–ª—é—á–∏—Ç–µ–ª—å–Ω–æ –≤ –∫–æ–Ω—Ç–µ–∫—Å—Ç–µ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω–∏—è –≤–∞–º —É—Å–ª—É–≥ –Ω–∞—à–µ–≥–æ –±–æ—Ç–∞ –∏ –Ω–µ –ø–µ—Ä–µ–¥–∞—é—Ç—Å—è –Ω–∏–∫–∞–∫–∏–º —Å—Ç–æ—Ä–æ–Ω–Ω–∏–º —Å–ª—É–∂–±–∞–º.\n\n"
        f"<b>5. –°–æ–±–ª—é–¥–µ–Ω–∏–µ —Ç—Ä–µ–±–æ–≤–∞–Ω–∏–π –∑–∞–∫–æ–Ω–æ–¥–∞—Ç–µ–ª—å—Å—Ç–≤–∞:</b>\n–ú—ã —Å–æ–±–ª—é–¥–∞–µ–º –≤—Å–µ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–∏–µ –∑–∞–∫–æ–Ω–æ–¥–∞—Ç–µ–ª—å–Ω—ã–µ —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è –∏ –æ—Ç—Ä–∞—Å–ª–µ–≤—ã–µ —Å—Ç–∞–Ω–¥–∞—Ä—Ç—ã, –≤ —Ç–æ–º —á–∏—Å–ª–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω—ã–µ <b>Telegram</b>, <b>Apple App Store</b> –∏ <b>Google Play Store</b>. –î–∞–∂–µ –≤ —Å–ª—É—á–∞–µ —é—Ä–∏–¥–∏—á–µ—Å–∫–æ–≥–æ –æ–±—è–∑–∞—Ç–µ–ª—å—Å—Ç–≤–∞ –º—ã –Ω–µ –º–æ–∂–µ–º —Ä–∞—Å–∫—Ä—ã—Ç—å –≤–∞—à—É –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é, –µ—Å–ª–∏ —ç—Ç–æ–≥–æ —Ç—Ä–µ–±—É–µ—Ç –∑–∞–∫–æ–Ω, –ø–æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ –∏–ª–∏ —Å—É–¥–µ–±–Ω—ã–π –ø—Ä–æ—Ü–µ—Å—Å, —Ç–∞–∫-–∫–∞–∫ –º—ã –Ω–µ —Å–æ—Ö—Ä–∞–Ω—è–µ–º –≤–∞—à —É–Ω–∏–∫–∞–ª—å–Ω—ã–π –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö.\n\n"
        f"<b>6. –ò–∑–º–µ–Ω–µ–Ω–∏—è –≤ –ü–æ–ª–∏—Ç–∏–∫–µ –∫–æ–Ω—Ñ–∏–¥–µ–Ω—Ü–∏–∞–ª—å–Ω–æ—Å—Ç–∏:</b>\n–ú—ã –º–æ–∂–µ–º –≤—Ä–µ–º—è –æ—Ç –≤—Ä–µ–º–µ–Ω–∏ –æ–±–Ω–æ–≤–ª—è—Ç—å –ü–æ–ª–∏—Ç–∏–∫—É –∫–æ–Ω—Ñ–∏–¥–µ–Ω—Ü–∏–∞–ª—å–Ω–æ—Å—Ç–∏, —á—Ç–æ–±—ã –æ—Ç—Ä–∞–∂–∞—Ç—å –∏–∑–º–µ–Ω–µ–Ω–∏—è –≤ –Ω–∞—à–µ–π –ø—Ä–∞–∫—Ç–∏–∫–µ –∏–ª–∏ —é—Ä–∏–¥–∏—á–µ—Å–∫–∏—Ö —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è—Ö. –õ—é–±—ã–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –±—É–¥—É—Ç –ø—É–±–ª–∏–∫–æ–≤–∞—Ç—å—Å—è –Ω–∞ —ç—Ç–æ–π —Å—Ç—Ä–∞–Ω–∏—Ü–µ —Å —É–∫–∞–∑–∞–Ω–∏–µ–º –¥–∞—Ç—ã –≤—Å—Ç—É–ø–ª–µ–Ω–∏—è –≤ —Å–∏–ª—É. –ú—ã —Ä–µ–∫–æ–º–µ–Ω–¥—É–µ–º –≤–∞–º –ø–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–∏ –ø—Ä–æ—Å–º–∞—Ç—Ä–∏–≤–∞—Ç—å –ü–æ–ª–∏—Ç–∏–∫—É –∫–æ–Ω—Ñ–∏–¥–µ–Ω—Ü–∏–∞–ª—å–Ω–æ—Å—Ç–∏.\n\n"
        f"<b>7. –û—Ç–∫–∞–∑ –æ—Ç –æ—Ç–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ—Å—Ç–∏:</b>\n–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –±–æ—Ç–∞ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª—è–µ—Ç—Å—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é ¬´–∫–∞–∫ –µ—Å—Ç—å¬ª –≤ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–∏ —Å –æ–±—â–µ–ø—Ä–∏–Ω—è—Ç—ã–º –≤ –º–µ–∂–¥—É–Ω–∞—Ä–æ–¥–Ω–æ–π –ø—Ä–∞–∫—Ç–∏–∫–µ –ø—Ä–∏–Ω—Ü–∏–ø–æ–º. –≠—Ç–æ –æ–∑–Ω–∞—á–∞–µ—Ç, —á—Ç–æ –∑–∞ –ø—Ä–æ–±–ª–µ–º—ã, –≤–æ–∑–Ω–∏–∫–∞—é—â–∏–µ –≤ –ø—Ä–æ—Ü–µ—Å—Å–µ —ç–∫—Å–ø–ª—É–∞—Ç–∞—Ü–∏–∏ –±–æ—Ç–∞ (–≤ —Ç–æ–º —á–∏—Å–ª–µ, –Ω–æ –Ω–µ –æ–≥—Ä–∞–Ω–∏—á–∏–≤–∞—è—Å—å, –ø—Ä–æ–±–ª–µ–º—ã —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏ —Å –¥—Ä—É–≥–∏–º –ø—Ä–æ–≥—Ä–∞–º–º–Ω—ã–º –æ–±–µ—Å–ø–µ—á–µ–Ω–∏–µ–º, –Ω–µ—Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –±–æ—Ç–∞ –æ–∂–∏–¥–∞–Ω–∏—è–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, —Å–±–æ–∏ –≤ —Ä–∞–±–æ—Ç–µ —Å–æ —Å—Ç–æ—Ä–æ–Ω—ã —Ç—Ä–µ—Ç—å–∏—Ö –ª–∏—Ü, –∏ —Ç.–ø.). –ò—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—å –æ—Ç–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ—Å—Ç–∏ –Ω–µ –Ω–µ—Å–µ—Ç.\n\n"
        f"<b>8. –°–≤—è–∂–∏—Ç–µ—Å—å —Å –Ω–∞–º–∏:</b>\n–ï—Å–ª–∏ —É –≤–∞—Å –µ—Å—Ç—å –∫–∞–∫–∏–µ-–ª–∏–±–æ –≤–æ–ø—Ä–æ—Å—ã –∏–ª–∏ —Å–æ–º–Ω–µ–Ω–∏—è –ø–æ –ø–æ–≤–æ–¥—É –ü–æ–ª–∏—Ç–∏–∫–∏ –∫–æ–Ω—Ñ–∏–¥–µ–Ω—Ü–∏–∞–ª—å–Ω–æ—Å—Ç–∏ –∏–ª–∏ –Ω–∞—à–∏—Ö –º–µ—Ç–æ–¥–æ–≤ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –¥–∞–Ω–Ω—ã—Ö, —Å–≤—è–∂–∏—Ç–µ—Å—å —Å –Ω–∞–º–∏ –ø–æ –∞–¥—Ä–µ—Å—É <b>@OFFpolice</b>.\n\n"
        f"<b>–ò—Å–ø–æ–ª—å–∑—É—è @{bot_username}, –≤—ã —Å–æ–≥–ª–∞—à–∞–µ—Ç–µ—Å—å —Å —É—Å–ª–æ–≤–∏—è–º–∏, –∏–∑–ª–æ–∂–µ–Ω–Ω—ã–º–∏ –≤ –ü–æ–ª–∏—Ç–∏–∫–µ –∫–æ–Ω—Ñ–∏–¥–µ–Ω—Ü–∏–∞–ª—å–Ω–æ—Å—Ç–∏.</b>"
    )
    await bot.send_message(
        chat_id=message.chat.id,
        text=privacy_text,
        parse_mode=types.ParseMode.HTML,
        protect_content=True
    )

@dp.callback_query_handler(lambda c: c.data.startswith(("search_anime", "search_movies", "search_series", "search_cartoons")))
async def start_search(callback_query: types.CallbackQuery):
    search_texts = {
        "search_anime": "–ó–∞–≥—Ä—É–∂–∞—é —Å—Ç—Ä–∞–Ω–∏—Ü—É ¬´–ê–Ω–∏–º–µ¬ª",
        "search_movies": "–ó–∞–≥—Ä—É–∂–∞—é —Å—Ç—Ä–∞–Ω–∏—Ü—É ¬´–§–∏–ª—å–º–æ–≤¬ª",
        "search_series": "–ó–∞–≥—Ä—É–∂–∞—é —Å—Ç—Ä–∞–Ω–∏—Ü—É ¬´–°–µ—Ä–∏–∞–ª–æ–≤¬ª",
        "search_cartoons": "–ó–∞–≥—Ä—É–∂–∞—é —Å—Ç—Ä–∞–Ω–∏—Ü—É ¬´–ú—É–ª—å—Ç—Ñ–∏–ª—å–º–æ–≤¬ª"
    }
    search_functions = {
        "search_anime": send_anime_list,
        "search_movies": send_movies_list,
        "search_series": send_series_list,
        "search_cartoons": send_cartoon_list
    }
    await callback_query.answer(search_texts[callback_query.data], show_alert=False)
    await search_functions[callback_query.data](callback_query.message.chat.id, callback_query.message.message_id, page=1)

@dp.callback_query_handler(lambda c: c.data.startswith(("anime_page:", "movie_page:", "series_page:", "cartoon_page:")))
async def process_page_callback(callback_query: types.CallbackQuery):
    search_texts = {
        "anime_page": "–ü–µ—Ä–µ–∫–ª—é—á–∞—é —Å—Ç—Ä–∞–Ω–∏—Ü—É ¬´–ê–Ω–∏–º–µ¬ª",
        "movie_page": "–ü–µ—Ä–µ–∫–ª—é—á–∞—é —Å—Ç—Ä–∞–Ω–∏—Ü—É ¬´–§–∏–ª—å–º–æ–≤¬ª",
        "series_page": "–ü–µ—Ä–µ–∫–ª—é—á–∞—é —Å—Ç—Ä–∞–Ω–∏—Ü—É ¬´–°–µ—Ä–∏–∞–ª–æ–≤¬ª",
        "cartoon_page": "–ü–µ—Ä–µ–∫–ª—é—á–∞—é —Å—Ç—Ä–∞–Ω–∏—Ü—É ¬´–ú—É–ª—å—Ç—Ñ–∏–ª—å–º–æ–≤¬ª"
    }
    search_functions = {
        "anime_page": send_anime_list,
        "movie_page": send_movies_list,
        "series_page": send_series_list,
        "cartoon_page": send_cartoon_list
    }
    content_type, page = callback_query.data.split(":")
    page = int(page)
    alert_text = search_texts[content_type]
    handler_function = search_functions[content_type]
    await callback_query.answer(alert_text, show_alert=False)
    await handler_function(callback_query.message.chat.id, callback_query.message.message_id, page)

@dp.callback_query_handler(lambda c: c.data == "main_menu")
async def back_to_main_menu(callback_query: types.CallbackQuery):
    welcome_text = (
        "üëã <b>–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å!</b> –Ø —Ç–≤–æ–π –≤–∏—Ä—Ç—É–∞–ª—å–Ω—ã–π –≥–∏–¥ –≤ –º–∏—Ä–µ –∞–Ω–∏–º–µ, —Ñ–∏–ª—å–º–æ–≤, —Å–µ—Ä–∏–∞–ª–æ–≤ –∏ –º—É–ª—å—Ç—Ñ–∏–ª—å–º–æ–≤.\n\n"
        "üîç <b>–•–æ—á–µ—à—å –Ω–∞–π—Ç–∏ —á—Ç–æ-—Ç–æ –∏–Ω—Ç–µ—Ä–µ—Å–Ω–æ–µ –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –Ω–∞ –≤–µ—á–µ—Ä?</b>\n"
        "–ü—Ä–æ—Å—Ç–æ –Ω–∞–ø–∏—à–∏ –º–Ω–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –∞–Ω–∏–º–µ, —Ñ–∏–ª—å–º–∞, —Å–µ—Ä–∏–∞–ª–∞ –∏–ª–∏ –º—É–ª—å—Ç—Ñ–∏–ª—å–º–∞, "
        "–∏ —è –ø–æ–º–æ–≥—É —Ç–µ–±–µ –æ—Ç—ã—Å–∫–∞—Ç—å —ç—Ç–æ –Ω–∞ Rezka.ag.\n\n"
        "üì∫ <b>–ì–æ—Ç–æ–≤ –æ–∫—É–Ω—É—Ç—å—Å—è –≤ –ø—Ä–∏–∫–ª—é—á–µ–Ω–∏—è?</b>\n"
        "–ù–∞–∂–∏–º–∞–π –Ω–∞ –∫–Ω–æ–ø–∫–∏ –Ω–∏–∂–µ –∏–ª–∏ –æ—Ç–ø—Ä–∞–≤—å –º–Ω–µ —Å–æ–æ–±—â–µ–Ω–∏–µ, —á—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å –ø–æ–∏—Å–∫!"
    )
    keyboard = types.InlineKeyboardMarkup(row_width=2)
    keyboard.add(
        types.InlineKeyboardButton("üé¨ –ê–Ω–∏–º–µ", callback_data="search_anime"),
        types.InlineKeyboardButton("üé¨ –§–∏–ª—å–º—ã", callback_data="search_movies"),
        types.InlineKeyboardButton("üé¨ –°–µ—Ä–∏–∞–ª—ã", callback_data="search_series"),
        types.InlineKeyboardButton("üé¨ –ú—É–ª—å—Ç—Ñ–∏–ª—å–º—ã", callback_data="search_cartoons")
    )
    keyboard.add(
        types.InlineKeyboardButton("‚≠êÔ∏è –ü–æ–¥–¥–µ—Ä–∂–∏—Ç–µ –Ω–∞—Å", callback_data="donate")
    )
    try:
        await bot.edit_message_text(
            welcome_text,
            callback_query.message.chat.id,
            callback_query.message.message_id,
            parse_mode=types.ParseMode.HTML,
            reply_markup=keyboard
        )
    except MessageNotModified:
        pass

@dp.callback_query_handler(lambda c: c.data == "donate")
async def donate_stars(callback_query: types.CallbackQuery):
    keyboard = types.InlineKeyboardMarkup(row_width=2)
    keyboard.add(
        types.InlineKeyboardButton("50 ‚≠êÔ∏è", callback_data="donate_50"),
        types.InlineKeyboardButton("100 ‚≠êÔ∏è", callback_data="donate_100"),
        types.InlineKeyboardButton("150 ‚≠êÔ∏è", callback_data="donate_150"),
        types.InlineKeyboardButton("250 ‚≠êÔ∏è", callback_data="donate_250"),
        types.InlineKeyboardButton("350 ‚≠êÔ∏è", callback_data="donate_350"),
        types.InlineKeyboardButton("500 ‚≠êÔ∏è", callback_data="donate_500"),
        types.InlineKeyboardButton("750 ‚≠êÔ∏è", callback_data="donate_750"),
        types.InlineKeyboardButton("1000 ‚≠êÔ∏è", callback_data="donate_1000"),
    )
    keyboard.add(types.InlineKeyboardButton("üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="main_menu"))
    try:
        await bot.edit_message_text(
            chat_id=callback_query.message.chat.id,
            message_id=callback_query.message.message_id,
            text=(
                "<b>–•–æ—Ç–∏—Ç–µ –ø–æ–¥–¥–µ—Ä–∂–∞—Ç—å –Ω–∞—à –ø—Ä–æ–µ–∫—Ç?</b>\n\n"
                "<i><u>* –î–æ–±—Ä–æ–≤–æ–ª—å–Ω—ã–µ –ø–æ–∂–µ—Ä—Ç–≤–æ–≤–∞–Ω–∏—è –Ω–µ –ø–æ–¥—Ä–∞–∑—É–º–µ–≤–∞—é—Ç –≤–æ–∑–≤—Ä–∞—Ç —Å—Ä–µ–¥—Å—Ç–≤!</u></i>\n\n"
                "<b>–í—ã–±–µ—Ä–∏—Ç–µ —Å—É–º–º—É –¥–ª—è –¥–æ–Ω–∞—Ç–∞:</b>"
            ),
            parse_mode=types.ParseMode.HTML,
            reply_markup=keyboard
        )
    except MessageNotModified:
        pass

@dp.callback_query_handler(lambda callback_query: callback_query.data.startswith("donate_"))
async def process_donation(callback_query: types.CallbackQuery):
    await bot.answer_callback_query(callback_query.id)
    donation_amount = int(callback_query.data.split("_")[1])

    keyboard = types.InlineKeyboardMarkup()
    keyboard.add(types.InlineKeyboardButton(f"–ü–æ–∂–µ—Ä—Ç–≤–æ–≤–∞—Ç—å {donation_amount} ‚≠êÔ∏è", pay=True))

    await bot.send_invoice(
        chat_id=callback_query.message.chat.id,
        title="–ü–æ–¥–¥–µ—Ä–∂–∫–∞ –±–æ—Ç–∞",
        description=f"–í—ã –≤—ã–±—Ä–∞–ª–∏ —Å—É–º–º—É: {donation_amount} ‚≠êÔ∏è",
        payload=f"donation_{donation_amount}",
        provider_token="",
        currency="XTR", #XTR
        prices=[types.LabeledPrice(label=f"{donation_amount} ‚≠êÔ∏è", amount=donation_amount)],
        start_parameter="donation",
        reply_markup=keyboard,
        protect_content=True
    )
    await back_to_main_menu(callback_query)

@dp.pre_checkout_query_handler(lambda query: True)
async def process_pre_checkout_query(pre_checkout_query: types.PreCheckoutQuery):
    await bot.answer_pre_checkout_query(pre_checkout_query.id, ok=True)

@dp.message_handler(content_types=types.ContentType.SUCCESSFUL_PAYMENT)
async def successful_payment(message: types.Message):
    payment_info = message.successful_payment
    amount = payment_info.total_amount
    await message.answer(
        f"üéâ <b>–°–ø–∞—Å–∏–±–æ –∑–∞ –≤–∞—à—É —â–µ–¥—Ä–æ—Å—Ç—å!</b>\n–í—ã –ø–æ–¥–¥–µ—Ä–∂–∞–ª–∏ –Ω–∞—Å –Ω–∞ —Å—É–º–º—É <code>{amount}</code> ‚≠êÔ∏è",
        parse_mode=types.ParseMode.HTML,
        protect_content=True
    )

@dp.message_handler(content_types=[types.ContentType.TEXT])
async def search(message: types.Message):
    if message.via_bot or message.text.startswith('/'):
        return

    name = message.text.strip()
    await bot.send_chat_action(message.chat.id, "typing")
    try:
        title, link = await scraper.search_rezka(name, images=False)
        if title:
            keyboard = types.InlineKeyboardMarkup(row_width=2)
            keyboard.add(
                types.InlineKeyboardButton("üçø –°–º–æ—Ç—Ä–µ—Ç—å –Ω–∞ Rezka.ag", url=link)
            )
            keyboard.add(
                types.InlineKeyboardButton("üåÄ Shazam Bot", url="https://t.me/OFFpoliceShazamBot"),
                types.InlineKeyboardButton("üéû HDrezka", url="https://t.me/hdrezka_channel")
            )
            await message.answer(
                f"<b>üéû –ù–∞–∑–≤–∞–Ω–∏–µ:</b> <a href=\"{link}\">{title}</a>",
                parse_mode=types.ParseMode.HTML,
                reply_markup=keyboard
            )
            await bot.delete_message(chat_id=message.chat.id, message_id=message.message_id)
        else:
            await message.answer("<b>‚ùå –ù–∏—á–µ–≥–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ!</b> –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –∏–∑–º–µ–Ω–∏—Ç—å –∑–∞–ø—Ä–æ—Å –∏–ª–∏ –≤–≤–µ–¥–∏—Ç–µ –¥—Ä—É–≥–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ.", parse_mode=types.ParseMode.HTML)
            await bot.delete_message(chat_id=message.chat.id, message_id=message.message_id)
    except Exception as e:
        await message.answer(f"<b>‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∑–∞–ø—Ä–æ—Å–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞ –ø–æ–∑–∂–µ.</b>\n\n<b>‚ùå –û—à–∏–±–∫–∞:</b> <code>{e}</code>", parse_mode=types.ParseMode.HTML)
        await bot.delete_message(chat_id=message.chat.id, message_id=message.message_id)

@dp.inline_handler()
async def inline_search(query: types.InlineQuery):
    name = query.query.strip()
    try:
        if not name:
            keyboard = types.InlineKeyboardMarkup(row_width=2)
            keyboard.add(
                types.InlineKeyboardButton("üí¨ –ù–æ–≤—ã–π", switch_inline_query=""),
                types.InlineKeyboardButton("üí¨ –¢–µ–∫—É—â–∏–π", switch_inline_query_current_chat="")
            )
            keyboard.add(
                types.InlineKeyboardButton("üåÄ Shazam Bot", url="https://t.me/OFFpoliceShazamBot"),
                types.InlineKeyboardButton("üéû HDrezka", url="https://t.me/hdrezka_channel")
            )
            result = types.InlineQueryResultArticle(
                id="no_query",
                title="üîç –í–≤–µ–¥–∏—Ç–µ –ø–æ–∏—Å–∫–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å!",
                description="–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –∞–Ω–∏–º–µ, —Ñ–∏–ª—å–º–∞, —Å–µ—Ä–∏–∞–ª–∞ –∏–ª–∏ –º—É–ª—å—Ç—Ñ–∏–ª—å–º–∞, –¥–ª—è –ø–æ–∏—Å–∫–∞ –Ω–∞ Rezka.ag.",
                input_message_content=types.InputTextMessageContent(
                    message_text="üîç –î–ª—è –ø–æ–∏—Å–∫–∞ –≤–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –∞–Ω–∏–º–µ, —Ñ–∏–ª—å–º–∞, —Å–µ—Ä–∏–∞–ª–∞ –∏–ª–∏ –º—É–ª—å—Ç—Ñ–∏–ª—å–º–∞, –∏ —è –ø–æ–º–æ–≥—É —Ç–µ–±–µ –æ—Ç—ã—Å–∫–∞—Ç—å —ç—Ç–æ –Ω–∞ Rezka.ag.",
                    parse_mode=types.ParseMode.HTML
                ),
                reply_markup=keyboard,
                thumb_url="https://i.imgur.com/znbreEu_d.jpeg?maxwidth=520&shape=thumb&fidelity=high"
            )
            await query.answer([result], cache_time=1, is_personal=True, switch_pm_text="–ù–∞–∂–º–∏—Ç–µ, —á—Ç–æ–±—ã –ø–µ—Ä–µ–π—Ç–∏ –≤ –±–æ—Ç–∞.", switch_pm_parameter="start")
            return

        title, link, image_url = await scraper.search_rezka(name, images=True)
        if title:
            result_id = hashlib.md5(link.encode()).hexdigest()
            keyboard = types.InlineKeyboardMarkup(row_width=2)
            keyboard.add(
                types.InlineKeyboardButton("üçø –°–º–æ—Ç—Ä–µ—Ç—å –Ω–∞ Rezka.ag", url=link)
            )
            keyboard.add(
                types.InlineKeyboardButton("üí¨ –ù–æ–≤—ã–π", switch_inline_query=""),
                types.InlineKeyboardButton("üí¨ –¢–µ–∫—É—â–∏–π", switch_inline_query_current_chat="")
            )
            keyboard.add(
                types.InlineKeyboardButton("üåÄ Shazam Bot", url="https://t.me/OFFpoliceShazamBot"),
                types.InlineKeyboardButton("üéû HDrezka", url="https://t.me/hdrezka_channel")
            )
            result = types.InlineQueryResultArticle(
                id=result_id,
                title=title,
                description="–ù–∞–∂–º–∏—Ç–µ, —á—Ç–æ–±—ã –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å.",
                input_message_content=types.InputTextMessageContent(
                    message_text=f"<b>üéû –ù–∞–∑–≤–∞–Ω–∏–µ:</b> <a href=\"{link}\">{title}</a>",
                    parse_mode=types.ParseMode.HTML
                ),
                reply_markup=keyboard,
                thumb_url=image_url
            )
            await query.answer([result], cache_time=1, is_personal=True, switch_pm_text="–ù–∞–∂–º–∏—Ç–µ, —á—Ç–æ–±—ã –ø–µ—Ä–µ–π—Ç–∏ –≤ –±–æ—Ç–∞.", switch_pm_parameter="start")
        else:
            keyboard = types.InlineKeyboardMarkup(row_width=2)
            keyboard.add(
                types.InlineKeyboardButton("üí¨ –ù–æ–≤—ã–π", switch_inline_query=""),
                types.InlineKeyboardButton("üí¨ –¢–µ–∫—É—â–∏–π", switch_inline_query_current_chat="")
            )
            keyboard.add(
                types.InlineKeyboardButton("üåÄ Shazam Bot", url="https://t.me/OFFpoliceShazamBot"),
                types.InlineKeyboardButton("üéû HDrezka", url="https://t.me/hdrezka_channel")
            )
            result = types.InlineQueryResultArticle(
                id="no_query",
                title="‚ùå –ù–∏—á–µ–≥–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ!",
                description="–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –∏–∑–º–µ–Ω–∏—Ç—å –∑–∞–ø—Ä–æ—Å –∏–ª–∏ –≤–≤–µ–¥–∏—Ç–µ –¥—Ä—É–≥–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ.",
                input_message_content=types.InputTextMessageContent(
                    message_text="<b>‚ùå –ù–∏—á–µ–≥–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ!</b> –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –∏–∑–º–µ–Ω–∏—Ç—å –∑–∞–ø—Ä–æ—Å –∏–ª–∏ –≤–≤–µ–¥–∏—Ç–µ –¥—Ä—É–≥–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ.",
                    parse_mode=types.ParseMode.HTML
                ),
                reply_markup=keyboard,
                thumb_url="https://i.imgur.com/znbreEu_d.jpeg?maxwidth=520&shape=thumb&fidelity=high"
            )
            await query.answer([result], cache_time=1, is_personal=True, switch_pm_text="–ù–∞–∂–º–∏—Ç–µ, —á—Ç–æ–±—ã –ø–µ—Ä–µ–π—Ç–∏ –≤ –±–æ—Ç–∞.", switch_pm_parameter="start")
    except Exception as e:
        keyboard = types.InlineKeyboardMarkup(row_width=2)
        keyboard.add(
            types.InlineKeyboardButton("üí¨ –ù–æ–≤—ã–π", switch_inline_query=""),
            types.InlineKeyboardButton("üí¨ –¢–µ–∫—É—â–∏–π", switch_inline_query_current_chat="")
        )
        keyboard.add(
            types.InlineKeyboardButton("üåÄ Shazam Bot", url="https://t.me/OFFpoliceShazamBot"),
            types.InlineKeyboardButton("üéû HDrezka", url="https://t.me/hdrezka_channel")
        )
        result = types.InlineQueryResultArticle(
            id="no_query",
            title="‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞!",
            description="–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∑–∞–ø—Ä–æ—Å–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞ –ø–æ–∑–∂–µ.",
            input_message_content=types.InputTextMessageContent(
                message_text=f"<b>‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∑–∞–ø—Ä–æ—Å–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞ –ø–æ–∑–∂–µ.</b>\n\n<b>‚ùå –û—à–∏–±–∫–∞:</b> <code>{e}</code>",
                parse_mode=types.ParseMode.HTML
            ),
            reply_markup=keyboard,
            thumb_url="https://i.imgur.com/znbreEu_d.jpeg?maxwidth=520&shape=thumb&fidelity=high"
        )
        await query.answer([result], cache_time=1, is_personal=True, switch_pm_text="–ù–∞–∂–º–∏—Ç–µ, —á—Ç–æ–±—ã –ø–µ—Ä–µ–π—Ç–∏ –≤ –±–æ—Ç–∞.", switch_pm_parameter="start")

if __name__ == "__main__":
    executor.start_polling(dp, skip_updates=True)
